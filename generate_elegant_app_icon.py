#!/usr/bin/env python3
from PIL import Image, ImageDraw
import os
import math

def create_smooth_gradient(width, height, color1, color2):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏"""
    gradient = Image.new('RGBA', (width, height))
    draw = ImageDraw.Draw(gradient)
    
    for y in range(height):
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏
        ratio = y / height
        r = int(color1[0] + (color2[0] - color1[0]) * ratio)
        g = int(color1[1] + (color2[1] - color1[1]) * ratio)
        b = int(color1[2] + (color2[2] - color1[2]) * ratio)
        
        draw.line([(0, y), (width, y)], fill=(r, g, b, 255))
    
    return gradient

def create_soft_mask(size, corner_radius):
    """–°–æ–∑–¥–∞–µ—Ç –º—è–≥–∫—É—é –º–∞—Å–∫—É —Å –ø–ª–∞–≤–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏"""
    mask = Image.new('L', (size, size), 0)
    draw = ImageDraw.Draw(mask)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    draw.rounded_rectangle([0, 0, size, size], radius=corner_radius, fill=255)
    
    return mask

def create_elegant_checkmark(size, padding):
    """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–≥–∞–Ω—Ç–Ω—É—é –≥–∞–ª–æ—á–∫—É —Å –º—è–≥–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏"""
    check_img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    draw = ImageDraw.Draw(check_img)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–ª–æ—á–∫–∏
    check_area = size - 2 * padding
    center_x = size // 2
    center_y = size // 2
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –≥–∞–ª–æ—á–∫–∏
    scale = check_area / 100.0  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–¥ —Ä–∞–∑–º–µ—Ä
    
    # –õ–µ–≤–∞—è —á–∞—Å—Ç—å –≥–∞–ª–æ—á–∫–∏
    left_start = (center_x - 15 * scale, center_y + 2 * scale)
    left_end = (center_x - 5 * scale, center_y + 12 * scale)
    
    # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –≥–∞–ª–æ—á–∫–∏
    right_start = left_end
    right_end = (center_x + 18 * scale, center_y - 10 * scale)
    
    # –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —Ä–∞–∑–º–µ—Ä—É
    line_width = max(3, int(size * 0.08))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫—É—é —Ç–µ–Ω—å –¥–ª—è –æ–±—ä–µ–º–∞
    shadow_offset = max(1, size // 60)
    shadow_alpha = 60
    
    # –†–∏—Å—É–µ–º —Ç–µ–Ω—å –≥–∞–ª–æ—á–∫–∏
    draw.line([
        (left_start[0] + shadow_offset, left_start[1] + shadow_offset),
        (left_end[0] + shadow_offset, left_end[1] + shadow_offset)
    ], fill=(0, 0, 0, shadow_alpha), width=line_width)
    
    draw.line([
        (right_start[0] + shadow_offset, right_start[1] + shadow_offset),
        (right_end[0] + shadow_offset, right_end[1] + shadow_offset)
    ], fill=(0, 0, 0, shadow_alpha), width=line_width)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –±–µ–ª–∞—è –≥–∞–ª–æ—á–∫–∞
    draw.line([left_start, left_end], fill=(255, 255, 255, 255), width=line_width)
    draw.line([right_start, right_end], fill=(255, 255, 255, 255), width=line_width)
    
    return check_img

def create_app_icon(size, filename):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º—è–≥–∫–∏–º–∏ –∫—Ä–∞—è–º–∏"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    padding = size // 16  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∏–∫–æ–Ω–∫–∏
    icon_size = size - 2 * padding
    corner_radius = size // 3.5  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É–≥–ª—ã
    
    # –¶–≤–µ—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ (–∫–∞–∫ –Ω–∞ splash screen)
    color1 = (102, 126, 234)  # #667eea (–≤–µ—Ä—Ö)
    color2 = (118, 75, 162)   # #764ba2 (–Ω–∏–∑)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    gradient = create_smooth_gradient(icon_size, icon_size, color1, color2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∫ –¥–ª—è –æ–±—ä–µ–º–∞
    highlight = Image.new('RGBA', (icon_size, icon_size), (0, 0, 0, 0))
    highlight_draw = ImageDraw.Draw(highlight)
    
    # –°–æ–∑–¥–∞–µ–º —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π –±–ª–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    highlight_size_w = icon_size // 2
    highlight_size_h = icon_size // 4
    highlight_x = icon_size // 4
    highlight_y = icon_size // 8
    
    highlight_draw.ellipse([
        highlight_x, highlight_y, 
        highlight_x + highlight_size_w, highlight_y + highlight_size_h
    ], fill=(255, 255, 255, 25))
    
    # –°–æ–≤–º–µ—â–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å –±–ª–∏–∫–æ–º
    gradient_with_highlight = Image.alpha_composite(gradient.convert('RGBA'), highlight)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    final_img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –≤ —Ü–µ–Ω—Ç—Ä
    final_img.paste(gradient_with_highlight, (padding, padding))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—è–≥–∫—É—é –º–∞—Å–∫—É
    mask = create_soft_mask(size, corner_radius)
    final_img.putalpha(mask)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–≥–∞–Ω—Ç–Ω—É—é –≥–∞–ª–æ—á–∫—É
    checkmark = create_elegant_checkmark(size, size // 4)
    final_img = Image.alpha_composite(final_img, checkmark)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–Ω–∫—É—é —Ç–µ–Ω—å –ø–æ–¥ –∏–∫–æ–Ω–∫—É –¥–ª—è –≥–ª—É–±–∏–Ω—ã
    shadow = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    shadow_draw = ImageDraw.Draw(shadow)
    shadow_offset = max(2, size // 30)
    shadow_blur_radius = corner_radius + shadow_offset
    
    # –¢–µ–Ω—å —á—É—Ç—å –±–æ–ª—å—à–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
    shadow_draw.rounded_rectangle([
        shadow_offset, shadow_offset, 
        size + shadow_offset, size + shadow_offset
    ], radius=shadow_blur_radius, fill=(0, 0, 0, 30))
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è: —Ç–µ–Ω—å + –∏–∫–æ–Ω–∫–∞
    result = Image.alpha_composite(shadow, final_img)
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é —Ç–µ–Ω—å)
    result = result.crop((0, 0, size, size))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    result.save(filename, 'PNG')
    print(f"‚ú® –°–æ–∑–¥–∞–Ω–∞ —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞: {filename} ({size}x{size})")

def main():
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∫–æ–Ω–æ–∫
    icons_dir = "app_icons_elegant"  # –ù–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∏–∫–æ–Ω–æ–∫
    if not os.path.exists(icons_dir):
        os.makedirs(icons_dir)
    
    # –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    icon_sizes = [
        # Android
        (48, "android/res/mipmap-mdpi/ic_launcher.png"),
        (72, "android/res/mipmap-hdpi/ic_launcher.png"),
        (96, "android/res/mipmap-xhdpi/ic_launcher.png"),
        (144, "android/res/mipmap-xxhdpi/ic_launcher.png"),
        (192, "android/res/mipmap-xxxhdpi/ic_launcher.png"),
        
        # iOS
        (20, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png"),
        (40, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png"),
        (60, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png"),
        (58, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png"),
        (87, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png"),
        (80, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png"),
        (120, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png"),
        (120, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png"),
        (180, "ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png"),
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        (512, "icon_512.png"),
        (1024, "icon_1024.png"),
    ]
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("=" * 50)
    
    for size, relative_path in icon_sizes:
        filename = os.path.join(icons_dir, f"icon_{size}.png")
        create_app_icon(size, filename)
    
    print("=" * 50)
    print("‚úÖ –í—Å–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ –ò–∫–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {icons_dir}")
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ icon_1024.png –≤ assets/icons/app_icon.png")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: dart run flutter_launcher_icons")

if __name__ == "__main__":
    main()
